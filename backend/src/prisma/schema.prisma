generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId     Int             @id @unique(map: "account_account_id") @default(autoincrement()) @map("accountId")
  username      String          @unique
  password      String
  permissionSetting Int?
  HomeworkCheck HomeworkCheck[]
  JoinedClass   JoinedClass?
  JoinedTeams   JoinedTeams[]

  @@map("account")
}

model deletedAccount {
  deletedAccountId Int @id @default(autoincrement()) @map("deletedAccountId")
  deletedUsername      String
  deletedPassword      String
  deletedOn BigInt
}

model AccountSessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("account_sessions")
}

model Event {
  eventId     Int       @id @default(autoincrement()) @map("eventId")
  classId     Int
  eventTypeId Int
  name        String
  description String?
  startDate   BigInt
  endDate     BigInt?
  lesson      String?
  teamId      Int
  EventType   EventType @relation(fields: [eventTypeId], references: [eventTypeId], onDelete: Cascade, onUpdate: NoAction)
  Class       Class     @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@map("event")
}

model EventType {
  eventTypeId Int     @id @default(autoincrement()) @map("eventTypeId")
  classId     Int
  name        String
  color       String?
  Event       Event[]
  Class       Class   @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([classId, name])
  @@map("eventType")
}

model Class {
  classId     Int           @id @default(autoincrement()) @map("classId")
  className   String        @unique
  classCode   String        @unique
  classCreated BigInt
  isTestClass Boolean
  permissionDefaultSetting Int
  dsbMobileActivated Boolean
  dsbMobileUser String?
  dsbMobilePassword String?
  // The real name of the class to filter in the substitutions data
  dsbMobileClass String?
  Event       Event[]
  EventType   EventType[]
  Homework    Homework[]
  JoinedClass JoinedClass[]
  Lesson      Lesson[]
  Subjects    Subjects[]
  Team        Team[]
}

model Homework {
  homeworkId     Int             @id @default(autoincrement()) @map("homeworkId")
  classId        Int
  content        String
  subjectId      Int
  assignmentDate BigInt
  submissionDate BigInt
  teamId         Int
  Subjects       Subjects        @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade, onUpdate: NoAction)
  HomeworkCheck  HomeworkCheck[]
  Class          Class           @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@map("homework")
}

model HomeworkCheck {
  checkId    Int      @id @default(autoincrement()) @map("checkId")
  accountId  Int
  homeworkId Int
  Account    Account  @relation(fields: [accountId], references: [accountId], onDelete: Cascade, onUpdate: NoAction)
  Homework   Homework @relation(fields: [homeworkId], references: [homeworkId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([accountId, homeworkId], map: "homework_check_account_id_homework_id")
  @@map("homeworkCheck")
}

model JoinedClass {
  joinedClassId Int     @id @default(autoincrement()) @map("joinedClassId")
  classId       Int
  accountId     Int     @unique
  Account       Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade, onUpdate: NoAction)
  Class         Class   @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@map("joinedClass")
}

model JoinedTeams {
  joinedTeamId Int     @id @default(autoincrement()) @map("joinedTeamId")
  teamId       Int
  accountId    Int
  Account      Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade, onUpdate: NoAction)
  Team         Team    @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([teamId, accountId], map: "joined_teams_team_id_account_id")
  @@map("joinedTeams")
}

model Lesson {
  lessonId     Int    @id @default(autoincrement()) @map("lessonId")
  classId      Int
  lessonNumber Int
  weekDay      Int
  teamId       Int
  subjectId    Int
  room         String
  startTime    BigInt
  endTime      BigInt
  Class        Class  @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([classId, teamId, weekDay, lessonNumber, subjectId])
  @@map("lesson")
}

model Subjects {
  subjectId               Int      @id @default(autoincrement()) @map("subjectId")
  classId                 Int
  subjectNameLong         String
  subjectNameShort        String
  subjectNameSubstitution String[]
  teacherGender           String
  teacherNameLong         String
  teacherNameShort        String
  teacherNameSubstitution String[]
  Homework                Homework[]
  Class                   Class    @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([classId, subjectNameLong])
  @@unique([classId, subjectNameShort])
  @@map("subjects")
}

model Team {
  teamId      Int           @id @default(autoincrement()) @map("teamId")
  classId     Int
  name        String
  JoinedTeams JoinedTeams[]
  Class       Class         @relation(fields: [classId], references: [classId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([classId, name])
  @@map("team")
}